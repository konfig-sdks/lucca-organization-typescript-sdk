/* tslint:disable */
/* eslint-disable */
/*
Organization structure API

Welcome on the documentation for the Organization Structure API


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AxisSection } from '../models';
// @ts-ignore
import { AxisSectionTreeless } from '../models';
// @ts-ignore
import { AxissectionsCreateNewAxisSectionResponse } from '../models';
// @ts-ignore
import { AxissectionsGetByIdResponse } from '../models';
// @ts-ignore
import { AxissectionsList200Response } from '../models';
// @ts-ignore
import { AxissectionsListResponse } from '../models';
// @ts-ignore
import { AxissectionsUpdateByIdResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AxisSectionsApi - axios parameter creator
 * @export
 */
export const AxisSectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new AxisSection.
         * @summary Create a new AxisSection
         * @param {AxisSection} [axisSection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAxisSection: async (axisSection?: AxisSection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/axisSections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: axisSection,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axisSections',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(axisSection, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete an AxisSection by id
         * @param {number} axisSectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (axisSectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'axisSectionId' is not null or undefined
            assertParamExists('deleteById', 'axisSectionId', axisSectionId)
            const localVarPath = `/api/v3/axisSections/{axisSectionId}`
                .replace(`{${"axisSectionId"}}`, encodeURIComponent(String(axisSectionId !== undefined ? axisSectionId : `-axisSectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axisSections/{axisSectionId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single AxisSection by its unique identifier.
         * @summary Get an AxisSection by id
         * @param {number} axisSectionId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (axisSectionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'axisSectionId' is not null or undefined
            assertParamExists('getById', 'axisSectionId', axisSectionId)
            const localVarPath = `/api/v3/axisSections/{axisSectionId}`
                .replace(`{${"axisSectionId"}}`, encodeURIComponent(String(axisSectionId !== undefined ? axisSectionId : `-axisSectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axisSections/{axisSectionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all Axes satisfying query filters.
         * @summary List Axes
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {Array<number>} [id] Filter on axes unique identifiers.
         * @param {boolean} [isActive] Filter on axes active status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (paging: string, id?: Array<number>, isActive?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('list', 'paging', paging)
            const localVarPath = `/api/v3/axes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (id) {
                localVarQueryParameter['id'] = id;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all AxisSections satisfying query filters.
         * @summary List AxisSections
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {Array<number>} [axisId] Filter on the axis it belongs to.
         * @param {Array<number>} [ownerId] Filter on the owner managing it.
         * @param {boolean} [active] Filter on active status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list_1: async (paging: string, axisId?: Array<number>, ownerId?: Array<number>, active?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('list_1', 'paging', paging)
            const localVarPath = `/api/v3/axisSections`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }

            if (axisId) {
                localVarQueryParameter['axisId'] = axisId;
            }

            if (ownerId) {
                localVarQueryParameter['ownerId'] = ownerId;
            }

            if (active !== undefined) {
                localVarQueryParameter['active'] = active;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axisSections',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Partial or complete update to an existing AxisSection.
         * @summary Update an AxisSection by id
         * @param {number} axisSectionId 
         * @param {AxisSection} [axisSection] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById: async (axisSectionId: number, axisSection?: AxisSection, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'axisSectionId' is not null or undefined
            assertParamExists('updateById', 'axisSectionId', axisSectionId)
            const localVarPath = `/api/v3/axisSections/{axisSectionId}`
                .replace(`{${"axisSectionId"}}`, encodeURIComponent(String(axisSectionId !== undefined ? axisSectionId : `-axisSectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: axisSection,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/axisSections/{axisSectionId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(axisSection, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AxisSectionsApi - functional programming interface
 * @export
 */
export const AxisSectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AxisSectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new AxisSection.
         * @summary Create a new AxisSection
         * @param {AxisSectionsApiCreateNewAxisSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewAxisSection(requestParameters: AxisSectionsApiCreateNewAxisSectionRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AxissectionsCreateNewAxisSectionResponse>> {
            const axisSection: AxisSection = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewAxisSection(axisSection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete an AxisSection by id
         * @param {AxisSectionsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: AxisSectionsApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.axisSectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single AxisSection by its unique identifier.
         * @summary Get an AxisSection by id
         * @param {AxisSectionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: AxisSectionsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AxissectionsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.axisSectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all Axes satisfying query filters.
         * @summary List Axes
         * @param {AxisSectionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: AxisSectionsApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AxissectionsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.paging, requestParameters.id, requestParameters.isActive, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all AxisSections satisfying query filters.
         * @summary List AxisSections
         * @param {AxisSectionsApiList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list_1(requestParameters: AxisSectionsApiList0Request, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AxissectionsList200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list_1(requestParameters.paging, requestParameters.axisId, requestParameters.ownerId, requestParameters.active, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Partial or complete update to an existing AxisSection.
         * @summary Update an AxisSection by id
         * @param {AxisSectionsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateById(requestParameters: AxisSectionsApiUpdateByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AxissectionsUpdateByIdResponse>> {
            const axisSection: AxisSection = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateById(requestParameters.axisSectionId, axisSection, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AxisSectionsApi - factory interface
 * @export
 */
export const AxisSectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AxisSectionsApiFp(configuration)
    return {
        /**
         * Create a new AxisSection.
         * @summary Create a new AxisSection
         * @param {AxisSectionsApiCreateNewAxisSectionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewAxisSection(requestParameters: AxisSectionsApiCreateNewAxisSectionRequest = {}, options?: AxiosRequestConfig): AxiosPromise<AxissectionsCreateNewAxisSectionResponse> {
            return localVarFp.createNewAxisSection(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete an AxisSection by id
         * @param {AxisSectionsApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: AxisSectionsApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single AxisSection by its unique identifier.
         * @summary Get an AxisSection by id
         * @param {AxisSectionsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: AxisSectionsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AxissectionsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all Axes satisfying query filters.
         * @summary List Axes
         * @param {AxisSectionsApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: AxisSectionsApiListRequest, options?: AxiosRequestConfig): AxiosPromise<AxissectionsListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all AxisSections satisfying query filters.
         * @summary List AxisSections
         * @param {AxisSectionsApiList0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list_1(requestParameters: AxisSectionsApiList0Request, options?: AxiosRequestConfig): AxiosPromise<AxissectionsList200Response> {
            return localVarFp.list_1(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Partial or complete update to an existing AxisSection.
         * @summary Update an AxisSection by id
         * @param {AxisSectionsApiUpdateByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateById(requestParameters: AxisSectionsApiUpdateByIdRequest, options?: AxiosRequestConfig): AxiosPromise<AxissectionsUpdateByIdResponse> {
            return localVarFp.updateById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewAxisSection operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiCreateNewAxisSectionRequest
 */
export type AxisSectionsApiCreateNewAxisSectionRequest = {
    
} & AxisSection

/**
 * Request parameters for deleteById operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiDeleteByIdRequest
 */
export type AxisSectionsApiDeleteByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AxisSectionsApiDeleteById
    */
    readonly axisSectionId: number
    
}

/**
 * Request parameters for getById operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiGetByIdRequest
 */
export type AxisSectionsApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AxisSectionsApiGetById
    */
    readonly axisSectionId: number
    
}

/**
 * Request parameters for list operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiListRequest
 */
export type AxisSectionsApiListRequest = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof AxisSectionsApiList
    */
    readonly paging: string
    
    /**
    * Filter on axes unique identifiers.
    * @type {Array<number>}
    * @memberof AxisSectionsApiList
    */
    readonly id?: Array<number>
    
    /**
    * Filter on axes active status.
    * @type {boolean}
    * @memberof AxisSectionsApiList
    */
    readonly isActive?: boolean
    
}

/**
 * Request parameters for list_1 operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiList0Request
 */
export type AxisSectionsApiList0Request = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof AxisSectionsApiList0
    */
    readonly paging: string
    
    /**
    * Filter on the axis it belongs to.
    * @type {Array<number>}
    * @memberof AxisSectionsApiList0
    */
    readonly axisId?: Array<number>
    
    /**
    * Filter on the owner managing it.
    * @type {Array<number>}
    * @memberof AxisSectionsApiList0
    */
    readonly ownerId?: Array<number>
    
    /**
    * Filter on active status.
    * @type {boolean}
    * @memberof AxisSectionsApiList0
    */
    readonly active?: boolean
    
}

/**
 * Request parameters for updateById operation in AxisSectionsApi.
 * @export
 * @interface AxisSectionsApiUpdateByIdRequest
 */
export type AxisSectionsApiUpdateByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof AxisSectionsApiUpdateById
    */
    readonly axisSectionId: number
    
} & AxisSection

/**
 * AxisSectionsApiGenerated - object-oriented interface
 * @export
 * @class AxisSectionsApiGenerated
 * @extends {BaseAPI}
 */
export class AxisSectionsApiGenerated extends BaseAPI {
    /**
     * Create a new AxisSection.
     * @summary Create a new AxisSection
     * @param {AxisSectionsApiCreateNewAxisSectionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public createNewAxisSection(requestParameters: AxisSectionsApiCreateNewAxisSectionRequest = {}, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).createNewAxisSection(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete an AxisSection by id
     * @param {AxisSectionsApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public deleteById(requestParameters: AxisSectionsApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single AxisSection by its unique identifier.
     * @summary Get an AxisSection by id
     * @param {AxisSectionsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public getById(requestParameters: AxisSectionsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all Axes satisfying query filters.
     * @summary List Axes
     * @param {AxisSectionsApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public list(requestParameters: AxisSectionsApiListRequest, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all AxisSections satisfying query filters.
     * @summary List AxisSections
     * @param {AxisSectionsApiList0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public list_1(requestParameters: AxisSectionsApiList0Request, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).list_1(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Partial or complete update to an existing AxisSection.
     * @summary Update an AxisSection by id
     * @param {AxisSectionsApiUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AxisSectionsApiGenerated
     */
    public updateById(requestParameters: AxisSectionsApiUpdateByIdRequest, options?: AxiosRequestConfig) {
        return AxisSectionsApiFp(this.configuration).updateById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
