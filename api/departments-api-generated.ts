/* tslint:disable */
/* eslint-disable */
/*
Organization structure API

Welcome on the documentation for the Organization Structure API


The version of the OpenAPI document: 1.0
Contact: developers@lucca.fr

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DepartmentsGetAll400Response } from '../models';
// @ts-ignore
import { DepartmentsGetAllResponse } from '../models';
// @ts-ignore
import { DepartmentsGetByIdResponse } from '../models';
// @ts-ignore
import { DepartmentsListTreeResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all Departments satisfying query filters.
         * @summary List Departments
         * @param {string} paging {offset},{limit}. Defaults to 0,1000.
         * @param {number} [headId] 
         * @param {number} [parentId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (paging: string, headId?: number, parentId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'paging' is not null or undefined
            assertParamExists('getAll', 'paging', paging)
            const localVarPath = `/api/v3/departments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })
            if (headId !== undefined) {
                localVarQueryParameter['headId'] = headId;
            }

            if (parentId !== undefined) {
                localVarQueryParameter['parentId'] = parentId;
            }

            if (paging !== undefined) {
                localVarQueryParameter['paging'] = paging;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/departments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single Department by its unique identifier.
         * @summary Get Departement by id
         * @param {number} departmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (departmentId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'departmentId' is not null or undefined
            assertParamExists('getById', 'departmentId', departmentId)
            const localVarPath = `/api/v3/departments/{departmentId}`
                .replace(`{${"departmentId"}}`, encodeURIComponent(String(departmentId !== undefined ? departmentId : `-departmentId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/departments/{departmentId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all departments as a tree. Remark: first node is always empty and represents the starting point of the tree as multiple departments might be set to the highest level. 
         * @summary List Departements as a tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTree: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v3/departments/tree`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Authorization required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Authorization", keyParamName: "authorization", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/api/v3/departments/tree',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * List all Departments satisfying query filters.
         * @summary List Departments
         * @param {DepartmentsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: DepartmentsApiGetAllRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsGetAllResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(requestParameters.paging, requestParameters.headId, requestParameters.parentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a single Department by its unique identifier.
         * @summary Get Departement by id
         * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsGetByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.departmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all departments as a tree. Remark: first node is always empty and represents the starting point of the tree as multiple departments might be set to the highest level. 
         * @summary List Departements as a tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTree(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentsListTreeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTree(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * List all Departments satisfying query filters.
         * @summary List Departments
         * @param {DepartmentsApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: DepartmentsApiGetAllRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsGetAllResponse> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a single Department by its unique identifier.
         * @summary Get Departement by id
         * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<DepartmentsGetByIdResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * List all departments as a tree. Remark: first node is always empty and represents the starting point of the tree as multiple departments might be set to the highest level. 
         * @summary List Departements as a tree
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTree(options?: AxiosRequestConfig): AxiosPromise<DepartmentsListTreeResponse> {
            return localVarFp.listTree(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAll operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetAllRequest
 */
export type DepartmentsApiGetAllRequest = {
    
    /**
    * {offset},{limit}. Defaults to 0,1000.
    * @type {string}
    * @memberof DepartmentsApiGetAll
    */
    readonly paging: string
    
    /**
    * 
    * @type {number}
    * @memberof DepartmentsApiGetAll
    */
    readonly headId?: number
    
    /**
    * 
    * @type {number}
    * @memberof DepartmentsApiGetAll
    */
    readonly parentId?: number
    
}

/**
 * Request parameters for getById operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiGetByIdRequest
 */
export type DepartmentsApiGetByIdRequest = {
    
    /**
    * 
    * @type {number}
    * @memberof DepartmentsApiGetById
    */
    readonly departmentId: number
    
}

/**
 * DepartmentsApiGenerated - object-oriented interface
 * @export
 * @class DepartmentsApiGenerated
 * @extends {BaseAPI}
 */
export class DepartmentsApiGenerated extends BaseAPI {
    /**
     * List all Departments satisfying query filters.
     * @summary List Departments
     * @param {DepartmentsApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getAll(requestParameters: DepartmentsApiGetAllRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a single Department by its unique identifier.
     * @summary Get Departement by id
     * @param {DepartmentsApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public getById(requestParameters: DepartmentsApiGetByIdRequest, options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all departments as a tree. Remark: first node is always empty and represents the starting point of the tree as multiple departments might be set to the highest level. 
     * @summary List Departements as a tree
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApiGenerated
     */
    public listTree(options?: AxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).listTree(options).then((request) => request(this.axios, this.basePath));
    }
}
